var documenterSearchIndex = {"docs":
[{"location":"api/#ComponentLogging.ComponentLogging","page":"API","title":"ComponentLogging.ComponentLogging","text":"ComponentLogging\n\nComponent-scoped logging utilities for Julia built on top of Logging. This package provides:\n\nA ComponentLogger with hierarchical rule keys to control log levels per component path, e.g. (:net, :http).\nLightweight functions clog, clogenabled, clogf for emitting messages and checking if logging is enabled.\nMacros @clog, @clogf, @clogenabled that capture the caller module/source location for accurate provenance.\nA simple PlainLogger sink for pretty, colored output without timestamps/prefixes.\n\nTypical usage:\n\nusing ComponentLogging\n\nrules = Dict(\n    :core => Info, \n    :io => Warn, \n    :net => Debug\n)\nclogger = ComponentLogger(rules; sink=PlainLogger())\n\nclog(clogger, :core, Info, \"something happened\")\n\n\n\n\n\n","category":"module"},{"location":"api/#ComponentLogging.ComponentLogger","page":"API","title":"ComponentLogging.ComponentLogger","text":"ComponentLogger(; sink=ConsoleLogger(Debug))\nComponentLogger(rules::AbstractDict; sink=ConsoleLogger(Debug))\n\nA logger that delegates to an underlying sink (AbstractLogger) while applying component-based minimum level rules. Rules are defined on paths of symbols (NTuple{N,Symbol}). A lookup walks up the path and falls back to (:__default__,).\n\nsink: the underlying AbstractLogger that actually handles messages.\nrules: mapping from NTuple{N,Symbol} to LogLevel. The default entry ((DEFAULT_SYM,), Info) is created automatically when needed.\n\nThe effective minimum level is the minimum of all values in rules, cached in the min field for fast checks.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComponentLogging.PlainLogger","page":"API","title":"ComponentLogging.PlainLogger","text":"PlainLogger(stream::IO, min_level::LogLevel=Info)\nPlainLogger(min_level::LogLevel=Info)\n\nA simple AbstractLogger implementation that prints messages without standard prefixes/timestamps, with minimal coloring by level.\n\nstream: target stream; if closed, falls back to stderr.\nmin_level: minimum enabled level for the sink.\n\nIntended for tests, demos, or embedding in custom sinks.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComponentLogging.clog","page":"API","title":"ComponentLogging.clog","text":"clog(logger, [group], level, msg...)\n\nEmit a log message through the given or implicit logger. group is a Symbol or NTuple{N,Symbol}. If omitted, the default group (DEFAULT_SYM,) is used. level may be LogLevel or Integer. msg can be one or more values; tuples are passed through as-is.\n\nKeyword arguments file, line, and arbitrary kwargs... are forwarded to the underlying logger sink.\n\nIt is recommended to create a forwarding function to implicitly pass the logger:\n\nclog(group, level, msg...) = clog(logger, group, level, msg...)\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.clogenabled","page":"API","title":"ComponentLogging.clogenabled","text":"clogenabled(logger, [group], level) -> Bool\n\nReturn whether logging is enabled for the given group and level using the given or implicit module-bound logger.\n\nIt is recommended to create a forwarding function to implicitly pass the logger:\n\nclogenabled(group, level) = clogenabled(logger, group, level)\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.clogf","page":"API","title":"ComponentLogging.clogf","text":"clogf(f::Function, logger, [group], level)\n\nLike clog, but accepts a zero-argument function f that is only invoked if logging is enabled for the specified group and level. If f() returns nothing, no message is emitted. Non-tuple returns are converted to a tuple internally.\n\nIt is recommended to create a forwarding function to implicitly pass the logger:\n\nclogf(f, group, level) = clogf(f, logger, group, level)\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.get_logger","page":"API","title":"ComponentLogging.get_logger","text":"get_logger(mod::Module) -> AbstractLogger\n\nReturn the logger bound to module mod, walking up parent modules if necessary. Throws an error if none is found at the root.\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.get_logger-Tuple{Module}","page":"API","title":"ComponentLogging.get_logger","text":"Get the logger for the calling module; if unbound, fallback through parent modules; error at the top\n\n\n\n\n\n","category":"method"},{"location":"api/#ComponentLogging.set_log_level!","page":"API","title":"ComponentLogging.set_log_level!","text":"set_log_level!(logger, group, lvl) -> ComponentLogger\n\nSet or update the minimum level for a specific component group on logger. group may be a Symbol or a NTuple{N,Symbol} tuple; lvl can be LogLevel or Integer. Updates the internal min cache appropriately.\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.set_module_logger","page":"API","title":"ComponentLogging.set_module_logger","text":"set_module_logger(mod::Module, logger::AbstractLogger) -> String\n\nBind logger to the module mod. Returns a short human-readable string summary \"<Module> <- <LoggerType>\".\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.with_min_level","page":"API","title":"ComponentLogging.with_min_level","text":"with_min_level(f, logger, lvl)\n\nTemporarily set logger.min to lvl while executing f(), restoring the original value afterward even if an exception is thrown.\n\n\n\n\n\n","category":"function"},{"location":"api/#ComponentLogging.with_min_level-Tuple{Function, ComponentLogger, Union{Base.CoreLogging.LogLevel, Integer}}","page":"API","title":"ComponentLogging.with_min_level","text":"Temporarily set the minimum level within a do-block; restore afterward even if an exception is thrown; no lock\n\n\n\n\n\n","category":"method"},{"location":"api/#ComponentLogging.@bind_logger","page":"API","title":"ComponentLogging.@bind_logger","text":"@bind_logger [sink=...] [rules=...] [min=...] [module=...]\n\nBind a ComponentLogger to the given module (default: caller's module). Arguments must be passed as keywords. rules may be a full Dict of rule keys. If min is omitted, it is derived from rules[(DEFAULT_SYM,)].\n\nReturns the constructed ComponentLogger.\n\n\n\n\n\n","category":"macro"},{"location":"api/#ComponentLogging.@bind_logger-Tuple","page":"API","title":"ComponentLogging.@bind_logger","text":"@bind_logger [rules=...] [io=...] [console_level=...]\n@bind_logger Dict((:__default__,)=>Info, ...)\n\nBind a logger for the current module. Arguments can be several key=value pairs, or a single Dict (treated as rules).\n\n\n\n\n\n","category":"macro"},{"location":"api/#ComponentLogging.@clog","page":"API","title":"ComponentLogging.@clog","text":"@clog [group] level msg...\n\nMacro version of clog that captures the caller's Module, file, and line for accurate provenance. group must be a literal Symbol or tuple of literal symbols.\n\nExample:\n\n@clog 0 \"hello\"             # default group\n@clog :core 1000 \"hello\"    # single group (literal)\n@clog (:a,:b) 2000 \"hello\"  # specified group (literal)\n\n\n\n\n\n","category":"macro"},{"location":"api/#ComponentLogging.@clogenabled","page":"API","title":"ComponentLogging.@clogenabled","text":"@clogenabled group level\n\nMacro that expands to a boolean expression answering whether logging is enabled for the literal group and level at the call site (using the logger bound to the caller's module). group must be a literal Symbol or tuple of literal symbols.\n\n\n\n\n\n","category":"macro"},{"location":"api/#ComponentLogging.@clogf","page":"API","title":"ComponentLogging.@clogf","text":"@clogf [group] level expr\n\nMacro version of clogf. The last argument can be either a message expression or a zero-argument function (e.g. () -> begin ...; \"message\" end). The body is only evaluated if logging is enabled. Caller module and source location are captured automatically.\n\n\n\n\n\n","category":"macro"},{"location":"#ComponentLogging","page":"Home","title":"ComponentLogging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ComponentLogging.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ComponentLogging]\nOrder   = [:type, :function, :macro]","category":"page"}]
}
