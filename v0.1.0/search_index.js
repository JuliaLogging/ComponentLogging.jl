var documenterSearchIndex = {"docs":
[{"location":"#ComponentLogging","page":"Home","title":"ComponentLogging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ComponentLogging.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ComponentLogging.get_logger-Tuple{Module}","page":"Home","title":"ComponentLogging.get_logger","text":"Get the logger for the calling module; if unbound, fallback through parent modules; error at the top\n\n\n\n\n\n","category":"method"},{"location":"#ComponentLogging.with_min_level-Tuple{Function, ComponentLogger, Union{Base.CoreLogging.LogLevel, Integer}}","page":"Home","title":"ComponentLogging.with_min_level","text":"Temporarily set the minimum level within a do-block; restore afterward even if an exception is thrown; no lock\n\n\n\n\n\n","category":"method"},{"location":"#ComponentLogging.@bind_logger-Tuple","page":"Home","title":"ComponentLogging.@bind_logger","text":"@bind_logger [rules=...] [io=...] [console_level=...]\n@bind_logger Dict((:__default__,)=>Info, ...)\n\nBind a logger for the current module. Arguments can be several key=value pairs, or a single Dict (treated as rules).\n\n\n\n\n\n","category":"macro"},{"location":"#ComponentLogging.@clog-Tuple","page":"Home","title":"ComponentLogging.@clog","text":"@clog level msg...             # default group @clog (:a,:b) level msg...     # specified group (literal) @clog :core level msg...       # single group (literal)\n\n\n\n\n\n","category":"macro"}]
}
